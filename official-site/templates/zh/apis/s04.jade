#section-4(style='display:none')
	.markdown
		.div80
		h2 Android SDK
		hr
		p 欢迎使用云子/标签，本质上它们是一种带有 iBeacon 功能的无线智能传感器设备。
		p.title 目前我们的 Android SDK，主要提供以下功能：
			ol
				li 1.扫描周围的传感器设备
				li 2.读取传感器设备的参数
				li 3.上传传感器设备状态（电池、UMM等）至 
					a(href='http://cloud.sensoro.com',target='_blank') SENSORO 云平台
				li 4.设置云子传感器
		h3 安装 SDK
		h4 一. 下载
		p 您可以从下面的地址下载最新版的 Android SDK：
			a(href='https://github.com/Sensoro/SDK-Android',target='_blank') 下载地址
		h4 二. 安装与配置
		p 集成 SDK jar 包
		pre 在工程根目录新建 libs 文件夹，将下载的 SDK 解压到到该文件夹中。
		p 下面是 SDK 所包含的模块：
			ul
				li sensorocloud-<版本号>.jar
				li sensorobeaconkit-<版本号>.jar
				li android-async-http-1.4.6.jar
				li greendao-1.3.7.jar
				li gson-2.3.1.jar
		p 修改 AndroidManifest.xml
			ol
				li 1.在 AndroidManifest.xml 中集成 SDK 所需要的权限
					pre
						| &lt;manifest&gt
						|    ...
						|    &lt;uses-permission android:name="android.permission.BLUETOOTH" /&gt
						|    &lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN" /&gt
						|    &lt;uses-permission android:name="android.permission.INTERNET" /&gt
						|    &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt
						|    ...
						| &lt;/manifest&gt
				li 2.在 AndroidManifest.xml 中集成 SDK 所依赖的服务
					pre
						| &lt;manifest&gt
						|     ...
						|     &lt;application&gt
						|       ...
						|       &lt;service android:name="com.sensoro.beacon.kit.BeaconProcessService"/&gt
						|       &lt;service android:name="com.sensoro.beacon.kit.BeaconService"/&gt
						|       &lt;service android:name="com.sensoro.beacon.kit.IntentProcessorService"/&gt
						|       ...
						|     &lt;/application&gt
						|     ...
						| &lt;/manifest&gt

		h2 开始使用
		h3 一、应用程序初始化
		p 首先你需要初始化一个SDK的实例，并设置是否上传传感器数据（电池电量、UMM）等，然后启动扫描服务。以下为 SDK启动的样例代码。
		pre
			| SensoroManager sensoroManager = SensoroManager.getInstance(context);
			| /**
			|  * 检查蓝牙是否开启
			| **/
			| if (sensoroManager.isBluetoothEnabled()) {
			|    /**
			|      * 设置启用云服务 (上传传感器数据，如电量、UMM等)。如果不设置，默认为关闭状态。
			|    **/
			|    sensoroManager.setCloudServiceEnable(true);
			|    /**
			|      * 启动 SDK 服务
			|    **/
			|    try {
			|        sensoroManager.startService();
			|     } catch (Exception e) {
			|        e.printStackTrace(); // 捕获异常信息
			|     }
			| }
		p.title 提示：
			ul
				li SDK 是基于蓝牙 4.0 的服务，启动前请先检查蓝牙是否开启，否则 SDK 无法正常工作。
				li SDK 的设计采用单例模式，因此推荐在继承的 Application 类中进行初始化。
		p 如果 Android 设备的蓝牙没有打开，请使用下面样例代码请求打开蓝牙：
		pre 
			| Intent bluetoothIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			| startActivityForResult(bluetoothIntent, REQUEST_ENABLE_BT);
		
		h3 二、设置传感器数据监听
		p 你可以通过实现并设置 BeaconManagerListener 接口，来检测 Beacon 的出现,显示以及更新。样例代码如下：
		pre
			| BeaconManagerListener beaconManagerListener = new BeaconManagerListener() {
			|    @Override
			|    public void onUpdateBeacon(ArrayList<Beacon> beacons) {
			|        // 传感器信息更新
			|    }
			p
			|    @Override
			|    public void onNewBeacon(Beacon beacon) {
			|        // 发现一个新的传感器
			|    }
			|    @Override
			|     public void onGoneBeacon(Beacon beacon) {
			|       // 一个传感器消失
			|     }
			| };
			| sensoroManager.setBeaconManagerListener(beaconManagerListener);
		p 在这个接口中，传感器信息更新频率为 1 秒；发现一个新的传感器后，如果在 8 秒内没有再次扫描到这个设备，则会回调传感器消失。
		p.titile 提示：
			pre 请在 SDK 启动之前设置。

		h3 三、监控传感器设备进出状态
		p 通常我们进入或离开某些设备时需要进行一些操作。下面是判断是否进入和离开 SN 为"0117C5456A36"的云子的样例代码：
		pre
			| BeaconManagerListener beaconManagerListener = new BeaconManagerListener() {
			|    @Override
			|    public void onUpdateBeacon(ArrayList<Beacon> beacons) {
			|        // 传感器信息更新
			|    }
			|   @Override
			|   public void onNewBeacon(Beacon beacon) {
			|       if (beacon.getSerialNumber().equals("0117C5456A36")){
			|           // 进入 SN 为"0117C5456A36 的云子
			|       }
			|   }
			|   @Override
			|   public void onGoneBeacon(Beacon beacon) {
			|       if (beacon.getSerialNumber().equals("0117C5456A36")){
			|           // 离开 SN 为"0117C5456A36 的云子
			|       }
			|   }
			| };
			| sensoroManager.setBeaconManagerListener(beaconManagerListener);
		p.title 提示：
		pre 回调函数是在非 UI 线程中运行的，请不要在回调函数中进行任何 UI 的相关相关操作，否则会导致 SDK 运行异常。如有需要，请通过 Handler 或者 Activity.runOnUiThread 方式来运行你的代码。

		h3 四、读取传感器状态和更新
		p 下表为云子传感器中常用的重要参数列表。
		table
			thead
				tr
					th 属性 
					th 描述
			tbody
				tr
					td serialNumber 
					td SN，设备唯一标识
				tr
					td major 
					td iBeacon协议中的 major 信息
				tr
					td proximityUUID
					td iBeacon协议中的 UUID 信息
				tr
					td rssi
					td 信号强度
				tr
					td accuracy
					td 距离（米）
				tr
					td proximity
					td 范围（很远，附近，很近，未知）
				tr
					td temperature
					td 芯片温度
				tr
					td light
					td 光线
				tr
					td movingState
					td 移动状态
				tr
					td accelerometerCount
					td 移动计数器
				tr
					td batteryLevel
					td 电池电量
				tr
					td hardwareModelName
					td 硬件版本
				tr
					td firmwareVersion
					td 固件版本
				tr
					td measuredPower
					td 1 米处测量 rssi
				tr
					td transmitPower
					td 广播功率
				tr
					td advertisingInterval
					td 广播间隔
		p 应用程序通常会在传感器数据状态发生变化时进行一些操作，如信号强度变化，光线变化，移动状态变化，计数器数值变化。你可以通过遍历传感器更新列表，找到你关心的设备，查看其状态是否有变化。下面是判断 SN 为"0117C5456A36"的云子，运动状态是否有变化的样例代码：
		pre
			| BeaconManagerListener beaconManagerListener = new BeaconManagerListener() {
			|     @Override
			|      public void onUpdateBeacon(final ArrayList<Beacon> beacons) {
			|          // 检查串码为"0117C5456A36"的云子，运动状态是否有变化
			|         for(Beacon beacon:beacons){
			|              if (beacon.getSerialNumber().equals("0117C5456A36")){
			|                  if (beacon.getMovingState() == Beacon.MovingState.DISABLED){
			|                       // 运动传感器禁用
			|                   } else if (beacon.getMovingState() == Beacon.MovingState.STILL){
			|                       // 传感器静止
			|                   } else if (beacon.getMovingState() == Beacon.MovingState.MOVING){
			|                       // 传感器正在运动
			|                   }
			|               }
			|          }
			|       }
			p
			|      @Override
			|      public void onNewBeacon(Beacon beacon) {
			|            // 发现一个新的传感器
			|      }
			|      @Override
			|      public void onGoneBeacon(Beacon beacon) {
			|           // 一个传感器消失
			|       }
			|  };
		p.title 提示：
		p 回调函数是在非 UI 线程中运行的，请不要在回调函数中进行任何 UI 的相关相关操作，否则会导致 SDK 运行异常。如有需要，请通过 Handler 或者 Activity.runOnUiThread 方式来运行你的代码。

		h3 五、云子/标签防蹭用
		p 你可以为你的云子开启防蹭用功能，使其变成你的专有设备，防止第三方人员查看和使用。使用防蹭用功能需要一个密钥，在 
			a(href='http://cloud.sensoro.com',target='_blank') SENSORO 云平台 
			| 中注册后，你可以申请这个密钥，然后将其设置到 SDK 中。样例代码如下：
			pre
				| /**
				| * 设置云子防蹭用密钥 (如果没有可以不设置)
				| **/
				| sensoroManager.addBroadcastKey("01Y2GLh1yw3+6Aq0RsnOQ8xNvXTnDUTTLE937Yedd/DnkHESUpvQ7YvLucs9YfwGR5R/jwW8Rqp9XtGbmwbKXzXQ==");
			p.title 提示：
				ul
					li 请在 SDK 启动之前设置。
					li 如果 SDK 无法扫描到设备，请检查设备中设置的密钥和 SDK 设置的是否相同

		h2 总结
		p 至此，您已完成将 SDK 整合进您项目之中的全部工作。后面，您可以使用 SDK 的功能来完成您 App 与 云子传感器 之间的互动，更多技术细节，请参考完整的 
			a(href='http://sensoro.github.io/download/sdk/android/doc/index.html',target='_blank') SDK 文档 
			| ，以及我们的 
			a(href='https://github.com/Sensoro/SDK-Android/tree/master/Samples/Yunzi-Android',target='_blank') 示例应用程序源代码 。  


















